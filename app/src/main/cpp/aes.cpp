//
// Created by chen on 2018/11/22.
//

#include <stdint.h>
#include <jni.h>
#include <cstring>
#include "aes.h"
#include <android/log.h>

#define LOG_TAG "CHEN"
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)

static const uint8_t sbox[256] = {
        //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,//0
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,//1
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,//2
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,//3
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,//4
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,//5
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,//6
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,//7
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,//8
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,//9
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,//A
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,//B
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,//C
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,//D
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,//E
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 //F
};

static const uint8_t rsbox[256] = {
        //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,//0
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,//1
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,//2
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,//3
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,//4
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,//5
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,//6
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,//7
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,//8
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,//9
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,//A
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,//B
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,//C
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,//D
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,//E
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d //F
};

static const uint8_t key_box[40] = {
        //0     1    2      3     4    5     6     7      8    9
        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,//0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//0
};
//#define TEST
#ifdef TEST
static uint8_t temp_t[4][4] = {           //初始的密钥,测试数据
        {0x2b, 0x28, 0xab, 0x09},
        {0x7e, 0xae, 0xf7, 0xcf},
        {0x15, 0xd2, 0x15, 0x4f},
        {0x16, 0xa6, 0x88, 0x3c},
};
static uint8_t info_temp_f[4][4] = {
        {0x32, 0x88, 0x31, 0xe0},
        {0x43, 0x5a, 0x31, 0x37},
        {0xf6, 0x30, 0x98, 0x07},
        {0xa8, 0x8d, 0xa2, 0x34},
};
static uint8_t info_temp_t[4][4] = {
        {0x19, 0xa0, 0x9a, 0xe9},
        {0x3d, 0xf4, 0xc6, 0xf8},
        {0xe3, 0xe2, 0x8d, 0x48},
        {0xbe, 0x2b, 0x2a, 0x08},
};


static uint8_t info_temp[4][4] = {
        {0x61, 0x62, 0x63, 0x64},
        {0x61, 0x62, 0x63, 0x64},
        {0x61, 0x62, 0x63, 0x64},
        {0x61, 0x62, 0x63, 0x64},
};
static uint8_t temp[4][4] = {           //初始的密钥,测试数据
        {0x61, 0x62, 0x63, 0x64},
        {0x31, 0x32, 0x33, 0x34},
        {0x65, 0x66, 0x67, 0x68},
        {0x35, 0x36, 0x37, 0x38},
};
#endif

uint8_t mixCal2(uint8_t value) {//有限域的计算,所以高于8位的位会溢出,溢出的数据不需要,如果类型是int 请添加0xff,不然结果会出异常
    return static_cast<uint8_t>((value << 1) ^ ((value & 0x80) ? 0x1b : 0x00));
}

uint8_t mixCal3(uint8_t value) {
    return mixCal2(value) ^ value;
}

void print(char a, char b, char c) {
    LOGE("%x:%x:%x", a, b, c);
}

//生成多轮密钥
void getKey(jstring key, JNIEnv *env, uint8_t result[key_rounds][key_num]) {//密钥扩展.视频中有一个地方的计算是错误的
    const char *key_string = env->GetStringUTFChars(key, JNI_FALSE);
    size_t key_length = strlen(key_string);
    uint8_t local_key[key_length];
    memcpy(local_key, key_string, key_length);
    uint8_t temp[4][4];
    for (int i = 0; i < key_length; ++i) {
        int low = i / 4;
        int column = i % 4;
        temp[low][column] = local_key[i];
    }
    for (int i = 0; i < key_rounds; ++i) {
        for (int j = 0; j < 4; ++j) {
            if (j == 0) {
                for (int k = 0; k < 4; ++k) {
                    if (k < 3) {
                        result[i][j + 4 * k] = sbox[temp[k + 1][3]] ^ temp[k][0] ^ key_box[k * 10 + i];
                    } else {
                        result[i][j + 4 * k] = sbox[temp[0][3]] ^ temp[k][0] ^ key_box[k * 10 + 1];
                    }
                }
            } else {
                for (int k = 0; k < 4; k++) {
                    result[i][j + 4 * k] = result[i][j + 4 * k - 1] ^ temp[k][j];
                }
            }
        }
        for (int k = 0; k < 16; ++k) {             //把初始数据传入result中
            temp[k / 4][k % 4] = result[i][k];
//            LOGE("%x", temp[k / 4][k % 4]);
        }
//        LOGE("%s", "-----------------------------------------------------------------------");
    }
};

//ecb加密
void encrypt_ecb(uint8_t info[][16], size_t part_num, uint8_t key[key_rounds][key_num]) {
    for (int m = 0; m < part_num; ++m) {
        uint8_t info_temp[4][4];
        for (int n = 0; n < 16; ++n) {
            info_temp[n / 4][n % 4] = info[m][n];
//            LOGE("%x", info_temp[n / 4][n % 4]);
        }
//        LOGE("%s", "----------------------------------------------------------");
        for (int k = 0; k < key_rounds; ++k) {
            for (int i = 0; i < 16; ++i) {
                info_temp[i / 4][i % 4] = sbox[info_temp[i / 4][i % 4]];
//            LOGE("%x", info_temp[i / 4][i % 4]);
            }
//        LOGE("%s", "----------------------------------------------------------");
            uint8_t swap_temp = info_temp[1][0];//第二行行位移
            info_temp[1][0] = info_temp[1][1];
            info_temp[1][1] = info_temp[1][2];
            info_temp[1][2] = info_temp[1][3];
            info_temp[1][3] = swap_temp;

            swap_temp = info_temp[2][0]; //第三行行位移
            info_temp[2][0] = info_temp[2][2];
            info_temp[2][2] = swap_temp;

            swap_temp = info_temp[2][1];
            info_temp[2][1] = info_temp[2][3];
            info_temp[2][3] = swap_temp;

            swap_temp = info_temp[3][3];
            info_temp[3][3] = info_temp[3][2];
            info_temp[3][2] = info_temp[3][1];
            info_temp[3][1] = info_temp[3][0];
            info_temp[3][0] = swap_temp;


            if (k < (key_rounds - 1)) {
                //列混淆
                for (int j = 0; j < 4; ++j) {
                    uint8_t a = info_temp[0][j];
                    uint8_t b = info_temp[1][j];
                    uint8_t c = info_temp[2][j];
                    uint8_t d = info_temp[3][j];
                    info_temp[0][j] = mixCal2(a) ^ mixCal3(b) ^ c ^ d;
                    info_temp[1][j] = a ^ mixCal2(b) ^ mixCal3(c) ^ d;
                    info_temp[2][j] = a ^ b ^ mixCal2(c) ^ mixCal3(d);
                    info_temp[3][j] = mixCal3(a) ^ b ^ c ^ mixCal2(d);
                }
            }
            for (int j = 0; j < 16; ++j) {
                info_temp[j / 4][j % 4] = key[k][j] ^ info_temp[j / 4][j % 4];
//                LOGE("%x", info_temp[j / 4][j % 4]);
            }
            for (int n = 0; n < 16; ++n) {
                info[m][n] = info_temp[n / 4][n % 4];
//                LOGE("%x", info[m][n]);
            }
//            LOGE("%s", "-------------------------------------");
        }

    }
};
